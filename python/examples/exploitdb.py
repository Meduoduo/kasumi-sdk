from typing import Iterator, List
from kasumi import KasumiSearchStrategy, KasumiSearchResult, KasumiSpider, Kasumi, KasumiConfigration
from python.kasumi.cls import Kasumi, KasumiSearchResult
from .vulnerability import Vulnerability

app = Kasumi(
    KasumiConfigration(app_id=0, token="", search_key="")
)

class ExploitDBGoogleSpider(KasumiSpider):
    @property
    def priority(self) -> int:
        return 0

    def search(self, column: str, value: str) -> Iterator[KasumiSearchResult]:
        return []

class ExploitDBMongoSpider(KasumiSpider):
    @property
    def priority(self) -> int:
        return 2
    
    def search(self, column: str, value: str) -> Iterator[KasumiSearchResult]:
        if column == 'code':
            vulns = Vulnerability.find_by_code(value)
        elif column == 'name':
            vulns = Vulnerability.find_by_name(value)
        elif column == 'author':
            vulns = Vulnerability.find_by_author(value)
        elif column == 'platform':
            vulns = Vulnerability.find_by_platform(value)
        elif column == 'id':
            vulns = Vulnerability.find_by_id(value)
        else:
            return []

        return [KasumiSearchResult.load_from_dict(
            vuln.to_dict(), disabled_llm_columns=['exp', 'source', 'exp', 'poc', 'fix', 'attachments', 'embeded']
        ) for vuln in vulns]

class ExploitDBEmbeddingSpider(KasumiSpider):
    @property
    def priority(self) -> int:
        return 1

    def search(self, column: str, value: str) -> Iterator[KasumiSearchResult]:
        text = f"{column} is {value}"
        try:
            embedding = app.embeding_text(text)
            similarities = app.search_embedding_similarity(embedding)
            filtered_similarities = [similarity for similarity in similarities if similarity.get_similarity() > 0.5]
            if len(filtered_similarities) == 0:
                return []
            vulns = Vulnerability.get_in_ids([similarity.get_id() for similarity in filtered_similarities])
            return [KasumiSearchResult.load_from_dict(
                vuln.to_dict(), disabled_llm_columns=['exp', 'source', 'exp', 'poc', 'fix', 'attachments', 'embeded']
            ) for vuln in vulns]
        except:
            return []

class ExploitDBSearchStrategy(KasumiSearchStrategy):
    @property
    def name(self) -> str:
        return 'vulnerability'
    
    @property
    def description(self) -> str:
        return 'This strategy is used to search vulnerabilities.'

    @property
    def possible_columns(self) -> List[str]:
        return ['code', 'name', 'author', 'platform', 'id']
    
app.add_spider(ExploitDBGoogleSpider())
app.add_spider(ExploitDBMongoSpider())
app.add_spider(ExploitDBEmbeddingSpider())
app.add_search_strategy(ExploitDBSearchStrategy())

if __name__ == "__main__":
    app.run_forever()